/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        HashMap<Integer, Integer> inorderIndexMap = new HashMap();
        for(int i=0; i<= inorder.length-1; i++){
                inorderIndexMap.put(inorder[i], i);
        }
       
       TreeNode root = build(preorder, 0, preorder.length-1, inorder, 0, inorder.length-1, inorderIndexMap);
       return root;
    }

    public TreeNode build(int[] preorder, int prestart, int preend, int[] inorder, int instart, int inend, HashMap<Integer, Integer> inorderIndexMap){
        if(prestart > preend || instart > inend) return null;
        TreeNode root = new TreeNode(preorder[prestart]);
        int inroot = inorderIndexMap.get(root.val);
        int numsLeft = inroot-instart;

        root.left = build(preorder, prestart+1, prestart+numsLeft, inorder, instart, inroot-1, inorderIndexMap);
        root.right = build(preorder, prestart+numsLeft+1, preend, inorder, inroot+1, inend, inorderIndexMap);
        return root;
    }
}
