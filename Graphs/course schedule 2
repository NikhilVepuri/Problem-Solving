class Solution {
    public int[] findOrder(int n, int[][] prerequisites) {
        List<List<Integer>> adj = new ArrayList<>();
        int[] indegree = new int[n];

        for(int i=0; i< n; i++){
            adj.add(new ArrayList<>());
        }

        for(int[] pair: prerequisites){
            int course = pair[0];
            int pre = pair[1];
            adj.get(pre).add(course);
            indegree[course]++;
        }

        Queue<Integer> q = new LinkedList<>();

        for(int i=0; i< n; i++){
            if(indegree[i]==0)
                q.offer(i);
        }

        int[] ans = new int[n];
        int index = 0;

        while(!q.isEmpty()){
            int node = q.poll();
            ans[index++] = node;

            if(adj.get(node)!=null){
                for(int it : adj.get(node)){
                    indegree[it]--;
                    if(indegree[it]==0)
                        q.offer(it);
                }
            }
        }

return index==n? ans: new int[0];
    }
}
