// class Solution {
//     public int numIslands(char[][] grid) {
//         int islands = 0;
//         int n = grid.length;
//         int m = grid[0].length;
//         int[][] visited = new int[n][m];
//         for(int row = 0; row < n; row++){
//             for(int column = 0; column < m; column++){
//                 if(visited[row][column]==0 && grid[row][column]=='1'){
//                     islands++;
//                     bfs(grid, row, column, visited);
//                 }
//             }
//         }
//         return islands;
//     }

//     public void bfs(char[][] grid, int ro, int co, int[][] visited){
//         visited[ro][co] = 1;
//         Queue<Pair> queue = new LinkedList<Pair>();
//         queue.add(new Pair(ro, co));
//         int n = grid.length;
//         int m = grid[0].length;

//         while(!queue.isEmpty()){
//             int row = queue.peek().first;
//             int column = queue.peek().second;
//             queue.remove();
//             for(int delr = -1; delr<=1; delr++){
//                 for(int delc = -1; delc<=1; delc++){
//                     int nrow = delr + row;
//                     int ncol = delc + column;
//                     if(nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && 
//                         grid[nrow][ncol]=='1' && visited[nrow][ncol]==0){
//                         visited[nrow][ncol] = 1;
//                         queue.add(new Pair(nrow,ncol));
//                     }
//                 }
//             }

// }
//     }
// }

// class Pair{
//     int first;
//     int second;
//     public Pair(int first, int second){
//         this.first = first;
//         this.second = second;
//     }
// }
class Solution {
    public int numIslands(char[][] grid) {
        int islands = 0;
        int rows = grid.length;
        int cols = grid[0].length;
        Set<String> visited = new HashSet<>();

        int[][] directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                if (grid[r][c] == '1' && !visited.contains(r + "," + c)) {
                    islands++;
                    bfs(grid, r, c, visited, directions, rows, cols);
                }
            }
        }

        return islands;        
    }

    private void bfs(char[][] grid, int r, int c, Set<String> visited, int[][] directions, int rows, int cols) {
        Queue<int[]> q = new LinkedList<>();
        visited.add(r + "," + c);
        q.add(new int[]{r, c});

        while (!q.isEmpty()) {
            int[] point = q.poll();
            int row = point[0], col = point[1];

            for (int[] direction : directions) {
                int nr = row + direction[0], nc = col + direction[1];
                if (nr >= 0 && nr < rows && nc >= 0 && nc < cols && grid[nr][nc] == '1' && !visited.contains(nr + "," + nc)) {
                    q.add(new int[]{nr, nc});
                    visited.add(nr + "," + nc);
                }
            }
        }
    }    
}
