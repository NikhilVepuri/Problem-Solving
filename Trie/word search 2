class Solution {
    
    public List<String> findWords(char[][] board, String[] words) {
        TrieNode p = buildTrie(words);
        List<String> res = new ArrayList<>();
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                dfs(i, j, p, board, res);
            }
        }
        return res;
    }

    public void dfs(int i, int j, TrieNode p, char[][] board, List<String> res){
        if(board[i][j] == '#' || p.children[board[i][j]-'a'] == null) return;
        // i<0|| j<0|| i>=board.length|| j>=board[0].length || p.children[board[i][j]-'a'] == null) return;
        p = p.children[board[i][j]-'a'];
        if(p.word != null){
            res.add(p.word);
            p.word = null;
        }

        char temp = board[i][j];
        board[i][j] = '#';
        if(i>0) dfs(i-1, j, p, board, res);
        if(j>0) dfs(i, j-1, p, board, res);
        if(i<board.length-1) dfs(i+1, j, p, board, res);
        if(j<board[0].length-1) dfs(i, j+1, p, board, res);
        board[i][j] = temp;

    }

    public TrieNode buildTrie(String[] words){
        TrieNode root = new TrieNode();
        for(String s : words){
            TrieNode curr = root;
            for(char c : s.toCharArray()){
                if(curr.children[c-'a']==null){
                    curr.children[c-'a'] = new TrieNode();
                }
                curr = curr.children[c-'a'];
            }
            curr.word = s;
        }
        return root;
    }
    
}

class TrieNode{
        TrieNode[] children = new TrieNode[26];
        String word;
    }
