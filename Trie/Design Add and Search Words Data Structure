class TrieNode{
    TrieNode[] children = new TrieNode[26];
    boolean isLeaf = false;
}
class WordDictionary {
    TrieNode root;
    public WordDictionary() {
        root = new TrieNode();
    }
    
    public void addWord(String word) {
        TrieNode curr = root;
        for(char c: word.toCharArray()){
            if(curr.children[c-'a'] == null){
                curr.children[c-'a'] = new TrieNode();
            }
            curr = curr.children[c-'a'];
        }
        curr.isLeaf = true;
    }
    
    public boolean search(String word) {
        return dfs(word.toCharArray(), 0, root);
    }
    public boolean dfs(char[] word, int index, TrieNode root){
        if(index == word.length) return root.isLeaf;

        char c = word[index];
        if(c == '.'){
            for(int i = 0; i < 26; i++){
                if(root.children[i]!=null){
                      if(dfs(word, index+1, root.children[i]))
                        return true;
                        
                }
            }
            return false;
        }
        else{
            if(root.children[c-'a']!=null){
                return dfs(word, index+1, root.children[c-'a']);
            }
            else
                return false;
        }
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */
