class Solution {
    public int longestCommonSubsequence(String s, String t) {
        // int m = text1.length;
        // int n = text2.length;

        // int[] prev = new int[m+1];
        // int[] curr = new int[n+1];

        // Arrays.fill(prev, 0);
        // Arrays.fill(curr, 0);

        // for(int i=1; i<m; i++){
        //     for(int j=1; j<=n; j++){
        //         if(s[i-1] == t[j-1]) curr[j] = 1 + prev[j-1];
        //         else curr[j] = max(prev[j], curr[j-1]); 
        //     }
        // }
        int m = s.length();
        int n = t.length();
        int[][] dp = new int[m][n];
        for(int i = 0 ; i < m; i++){
            for(int j = 0 ; j < n; j++){
                dp[i][j] = -1;
            }
        }
        return helper(m-1, n-1, s, t, dp);
    }

    public int helper(int i, int j, String s, String t, int[][] dp){
        if(i<0 || j<0) return 0;

        if(dp[i][j] != -1) return dp[i][j];

        if(s.charAt(i) == t.charAt(j)){
             dp[i][j] = 1 + helper(i-1, j-1, s, t, dp);
             return dp[i][j];
        }

        dp[i][j] = Math.max(helper(i-1, j, s,t,dp), helper(i, j-1, s,t,dp));

        return dp[i][j];
    }
}
