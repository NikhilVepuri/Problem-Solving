class Solution {
    int dp[];
    public int rob(int[] nums) {
        int n = nums.length;
        if (n == 0) return 0;
        if (n == 1) return nums[0];
        int[] temp1 = new int[n-1];
        int[] temp2 = new int[n-1];
        for(int i=0; i< n-1; i++){
             temp1[i] = nums[i];
             temp2[i] = nums[i+1]; 
        }
        return Math.max(robHelper(temp1), robHelper(temp2));
    }
    public int robHelper(int[] nums) {
        dp = new int[nums.length];
        Arrays.fill(dp, -1);
        return rob(nums.length - 1, nums);
    }
    public int rob(int n, int[] nums){
        if(n<0) return 0;
        if(dp[n]!=-1) return dp[n];
        int res = Math.max(nums[n] + rob(n-2, nums), rob(n-1, nums));
        dp[n] = res;

        return dp[n];
}
}
