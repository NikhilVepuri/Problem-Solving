/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
      if(lists == null || lists.length==0)
        return null;
      return mergeListsHelper(lists, 0, lists.length-1);
    }
  public ListNode mergeListsHelper(ListNode[] lists, int start, int end){
    if(start == end) return lists[start];
    if(start+1 == end) return merge(lists[start], lists[end]);

    int mid = start + (end-start)/2;
    ListNode left = mergeListsHelper(lists, start, mid);
    ListNode right = mergeListsHelper(lists, mid+1, end);

    return merge(left, right);
  }

  public ListNode merge(ListNode list1, ListNode list2){
    ListNode node = new ListNode(0);
    ListNode res = node;
    while(list1!=null && list2!=null){
        if(list1.val<list2.val){
            node.next = list1;
            node = node.next;
            list1=list1.next;
        }
        else if(list1.val==list2.val){
            node.next = list1;
            node = node.next;
            list1=list1.next;
        }
        else{
            node.next = list2;
            node = node.next;
            list2=list2.next;
        }
    }
    if(list1!=null){
            node.next = list1;
        }
        else{
            node.next = list2;
        }
    return res.next;
  }
}
